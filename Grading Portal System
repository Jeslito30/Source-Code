/* 
Activity No.           Title: Mini - Project Phase 3: Basic Data Persistence
Mini- Project Title:  Grading Portal System
Developers: Geverola, Jeslito; Jaljis, Shekinah Abegain, G; Mabawad, Reogie Akero P
Date Accomplished: June 08, 2024
Course Incharged: Dony C. Dongiapon
*/
package miniproject;
import javax.xml.parsers.DocumentBuilder; 
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer; 
import javax.xml.transform.TransformerFactory; 
import javax.xml.transform.dom.DOMSource; 
import javax.xml.transform.stream.StreamResult;

import org.json.JSONArray;
import org.json.JSONObject;
import org.w3c.dom.Document; 
import org.w3c.dom.Element; 

import java.io.*;
import java.util.*;

public class Main{
        private static final Scanner scanner = new Scanner(System.in);
        private static final String STUDENT_FILE_PATH = "Student.csv";
        private static final String INSTRUCTOR_FILE_PATH = "Instructor.csv";
        private static final String REGISTER_FILE_PATH = "Register.csv";
        private static final String EDITSTUDENT_XML_PATH = "UpdatedStudent.xml";
        private static final String EDITINSTRUCTOR_XML_PATH = "UpdatedInstructor.xml";
        private static final String EDITSTUDENT_JSON_PATH = "UpdatedStudent.json";
        private static final String EDITINSTRUCTOR_JSON_PATH = "UpdatedInstructor.json";
        
	public static void main(String[] args) {
		while (true) {
			showMainMenu();
	    }
	}

	private static void showMainMenu() {
	
		divider();
    System.out.println("\t\t\tWelcome to Grading Portal System\n");
    try {
        int optionNum = 1;
        for (Menu menu : Menu.values()) {
            System.out.println(optionNum + ". " + menu);
            optionNum++;
        }

        System.out.print("\nEnter your choice : ");
        int choice = scanner.nextInt();
        scanner.nextLine(); 

        switch (choice) {
            case 1:
                login();
                break;
                
            case 2:
                register();
                break;
                
            case 3:
                divider();
                System.out.println("Exiting...");
                scanner.nextLine();
                System.out.println("Grading Portal System closed.");
                System.exit(0);
                break;
                
            default:
                System.out.println("\nInvalid choice. Please enter a valid option.");
                showMainMenu();
        }
    } catch (InputMismatchException e) {
        System.out.println("\nInvalid input.");
        System.out.println();
        showMainMenu();
    }
}

	private static void login() {
		try {
	        divider();
	        System.out.println("\t\t\t\t\tLogin\n");
	        System.out.print("Username: ");
	        String username = scanner.nextLine();
	        System.out.print("Password : ");
	        String password = scanner.nextLine();

	        if ((username.equals("admin") || username.equals("university")) && password.equals("admin123")) {
	            adminMenu();
	            
	        }else if (username.equals("instructor") && password.equals("instructor123")) {
	            instructorMenu(username);
	          
	        }else if (username.equals("Dony") && password.equals("dony123")) {
	        	instructorMenu(username);
	           
	        }else if (username.equals("Jeslito") && password.equals("Jeslito123")) {
	        	studentMenu(username);
	            
	        }else if (username.equals("Shekinah") && password.equals("Shekinah123")) {
	        	studentMenu(username);
	        }
		
	        String userType = detectUser(username, password);
	        if (userType != null) {
	            switch (userType) {
	                case "Instructor":
	                    instructorMenu(username);
	                    break;
	                case "Student":
	                    studentMenu(username);
	                    break;
	                default:
	                    System.out.println("\nInvalid user type.");
	                    login();
	                    break;
	            }
	        } else {
	            System.out.println("\nAccount does not exist.");
	            login();
	            return;
	        }

	    } catch (InputMismatchException e) {
	        System.out.println("\nInvalid input. Please enter a number.");
	        login();
	    } catch (Exception e) {
	        System.out.println("\nError Occured");
	        login();
	    }
	}

	private static String detectUser(String username, String pass) {
        
        try (Scanner fileScanner = new Scanner(new File(REGISTER_FILE_PATH))) {
            while (fileScanner.hasNextLine()) {
                String[] parts = fileScanner.nextLine().split(",");
                if (parts.length >= 3 && parts[1].equals(username) && parts[2].equals(pass)) {
                    return parts[0]; 
                }
            }
        } catch (IOException e) {
            System.out.println("\nAccount does not exist.");
            login();
        }
        return null;
}

	private static void adminMenu() {
	        
		try {
            divider();
            System.out.println("\t\t\t\tWelcome Admin!\n");
	        System.out.println("1. Add");
	        System.out.println("2. Edit");
	        System.out.println("3. Logout");
	        System.out.print("\nEnter your choice: ");
	        int choice = scanner.nextInt();
	        
            switch (choice) {
	        	case 1:
	               adminAdd();

	                break;

	        	case 2:
	        		adminEdit();
	                break;

	        	case 3:
	        		showMainMenu();
	                break;

	        	default:
                    System.out.println("\nInvalid choice. Please enter a valid option.");
                    adminMenu();
	            }
	            
	        } catch (InputMismatchException e) {
	                System.out.println("\nInvalid input type!");
                    adminMenu();
	        } catch (Exception e) {
                    System.out.println("\nError Occured");
                    adminMenu();
	        }
	}
	
	private static void adminAdd() {
		try {
				divider();
                System.out.println("\t\t\t\t\tAdmin\n");
                System.out.println("1. Add Student");
                System.out.println("2. Add Instructor");
                System.out.println("3. Back");
                System.out.print("\nEnter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); 
        
         		switch (choice) {
         			case 1:
         				divider();
         				System.out.println("\t\t\t\t\tAdmin\n");
         				System.out.println("ADD NEW STUDENT");
         				System.out.println();
         				addStudent();
         				break;
                 
         			case 2:
         				divider();
         				System.out.println("\t\t\t\t\tAdmin\n");
         				System.out.println("ADD NEW INSTRUCTOR");
         				System.out.println();
         				addInstructor();
         				break;
         				
         			case 3:	
         				adminMenu();
         				break;
                 
         			default:
         				System.out.println("\nInvalid choice. Please enter a valid option.");
         				adminAdd();
         		}
		} catch (InputMismatchException e) {
                System.out.println("\nInvalid input type!");
                adminAdd();
		} catch (Exception e) {
                System.out.println("\nError Occured. Please try again!");
                adminAdd();
		}
	}

	private static void adminEdit() {
		try {
			divider();
			System.out.println("\t\t\t\t\tAdmin\n");
			System.out.println("1. Edit Student Information");
			System.out.println("2. Edit Instructor Information");
			System.out.println("3. Back");
			System.out.print("\nEnter your choice: ");
			int choice = scanner.nextInt();
			scanner.nextLine(); 

        		switch (choice) {
        			case 1:
            			divider();
            			System.out.println("\t\t\t\t\tAdmin\n");
            			System.out.println("EDIT STUDENT INFORMATION");
            			System.out.print("\nStudent Name: ");
            			String studentName = scanner.nextLine();
            			editStudentInfo(studentName);
            			break;
            			
                	case 2:
                		divider();
                		System.out.println("\t\t\t\t\tAdmin\n");
                		System.out.println("EDIT INSTRUCTOR INFORMATION");
                		System.out.print("\nInstructor Name: ");
                		String instructorName = scanner.nextLine();
                		editInstructorInfo(instructorName);
                		break;
                    
                	case 3:
                		adminMenu();
                		break;
                    
                	default:
                		System.out.println("\nInvalid choice. Please enter a valid option.");
                		adminEdit();
        		}
		} catch (InputMismatchException e) {
            System.out.println("\nInvalid input type!");
            adminEdit();
		} catch (Exception e) {
            System.out.println("\nError Occured");
            adminEdit();
		} 		
	}
	
	public static void addStudent() {
		try {
			while (true) {
				System.out.print("Student Name: ");
		        String studentName = scanner.nextLine();
		        if (!isValidName(studentName)) {
		        System.out.println("\nInvalid input! Please enter a valid name.");
		        continue;
		        }

		        String studentId;
		        while (true) {
		        	studentId = getInput("Student ID number (XXXX-XXXX):", "\\d{4}-\\d{4}");
		            if (studentId != null) break;
		            	System.out.println("\nInvalid input! Please enter a valid student ID number.");
		        }

		        String year;
		        while (true) {
		        	year = getInput("Year Level (1-4): ", "[1-4]");
		            if (year != null) break;
		                System.out.println("\nInvalid input! Please enter a valid year level.");
		        }

		        String semester;
		        while (true) {
		        	semester = getInput("Semester (1/2): ", "[1-2]");
		            if (semester != null) break;
		                System.out.println("\nInvalid input! Please enter a valid semester.");
		        }

		            String faculty = null; 
                    String choice = null;
                    
		            while (faculty == null) { 
		                int optionNum = 1;
                                System.out.println("Faculty List : ");
		                for (Facultys f : Facultys.values()) {
		                    System.out.println("\t" + optionNum + ". " + f.FacultyName());
		                    optionNum++;
		                }

		                choice = getInput("\nEnter your choice : ", "[1-5]");
		                System.out.println();
		                
		                switch (choice) {
                                    case "1":
                                        faculty = "Faculty of Nursing Allied and Health Sciences";
                                        break;
                                    case "2":
                                        faculty = "Faculty of Teacher Education";
                                        break;
                                    case "3":
                                        faculty = "Faculty of Computing Data Sciences Engineering and Technology";
                                        break;
                                    case "4":
                                        faculty = "Faculty of Agriculture and Life Sciences";
                                        break;
                                    case "5":
                                        faculty = "Faculty of Governance and Business Management";
                                        break;
                                    default:
                                        System.out.println("I\nnvalid choice. Please enter a valid value.");

                                    }
		            }

		            String course = chooseCourse(faculty,choice);
		            if (course == null) return;    
                    	System.out.println("\n" + faculty + " : " + course);
                        System.out.println();

		            String section;
		            while (true) {
		            	System.out.println();
		            	section = getInput("Section: ", "^[a-zA-Z0-9\\s]+$");
		            	if (section != null && isValidName(section)) break;
		            		System.out.println("\nInvalid input! Please enter a valid section name.");
		            }

		            String[] subjects;
		            while (true) {
		                subjects = getSubjects();
		                if (subjects != null && subjects.length > 0) break;
		                	System.out.println("\nNo subjects found or available. Please enter subjects again.");
		            }

		            for (String subject : subjects) {
		                String instructor;
		                while (true) {
		                    instructor = getInstructor(subject);
		                    if (instructor != null) break;
		                    System.out.println("\nInvalid instructor for " + subject + ". Please try again.");
		                }

		           String schedule;
		           while (true) {
		        	   schedule = getSchedule(subject, instructor);
		               if (schedule != null) break;
		           }

		           String room;
		           while (true) {
		        	  room = getInput("Room for " + subject + ": ", "^[a-zA-Z0-9\\s]+$");
		        	  if (room != null) break;
		        	  		System.out.println("\nInvalid input! Please enter a valid room.");
		              

		           String studentRecord = studentName + ", " + studentId + ", " + year + ", " + semester + ", " + faculty + ", " + course + ", " + section + ", " +
		                                  subject + ", " + instructor + ", " + schedule + ", " + room + ", " + "Not Graded";
		           handleFileHandling(studentRecord, "write", STUDENT_FILE_PATH);
		            }

		           // openCSVFileInExcel(STUDENT_FILE_PATH);
		            System.out.println("\nStudent added successfully!");
		            adminMenu();
		        }
				}
			} catch (InputMismatchException e) {
		        System.out.println("\nInvalid input type!");
                scanner.nextLine();	 
                addStudent();
		        
		    } catch (Exception e) {
	            System.out.println("\nError Occured");
                scanner.nextLine();
                addStudent();
		    }
	 }
	
	private static String chooseCourse(String faculty, String choice) {
	    try {
	        System.out.println("Courses available in the " + faculty);
	        System.out.println();
	        String course = null;
                    String c;
	        switch (choice) {
	            case "1":
	                for (int i = 0; i < FNAHSCourse.values().length; i++) {
	                    System.out.println("\t" + (i + 1) + ". " + FNAHSCourse.values()[i].FNAHSCourses());
	                }
	                
                            c = getInput("\nEnter your choice: ", "[1]");
                            
                            switch(c){
                                case "1" :
                                    course = ("Bachelor of Science in Nursing");
                                break;
                                
                                default :
                                    System.out.println("\nInvalid choice.");
                            }
	                break;
	                
	            case "2":
	                for (int i = 0; i < FTEDCourse.values().length; i++) {
	                    System.out.println("\t" + (i + 1) + ". " + FTEDCourse.values()[i].FTEDCourses());
	                }
	                c = getInput("\nEnter your choice: ", "[1-7]");
	                
                            switch(c){
                                case "1" : 
                                    course = "Bachelor of Elementary Education";
                                    break;
                                case "2" :
                                    course = "Bachelor of Secondary Education - Major in Biological Sciences";
                                    break;
                                case "3" :
                                    course = "Bachelor of Secondary Education - Major in English";
                                    break;
                                case "4" : 
                                    course = "Bachelor of Secondary Education - Major in Mathematics";
                                    break;
                                case "5" : 
                                    course = "Bachelor of Secondary Education - Major in Science";
                                    break;
                                case "6" : 
                                    course = "Bachelor of Physical Education";
                                    break;
                                case "7" :
                                    course = "Bachelor of Special Needs Educations";
                                    break;
                                default : 
                                    System.out.println("\nInvalid choice.");
                            }
                            
                            break;
	            case "3":
	                for (int i = 0; i < FCDSETCourse.values().length; i++) {
	                    System.out.println("\t" +(i + 1) + ". " + FCDSETCourse.values()[i].FCDSETCourses());
	                }
	                c = getInput("\nEnter your choice: ", "[1-4]");
                            
                            switch(c){
                                case "1" :
                                    course = "Bachelor of Science in Civil Engineering";
                                    break;
                                case "2" :
                                    course = "Bachelor of Industrial Technology Management";
                                    break;
                                case "3" :
                                    course = "Bachelor of Science in Infomation Technology";
                                    break;
                                case "4" :
                                    course = "Bachelor of Mathematics - Major in Research and Statistics";
                                    break;
                                default : 
                                    System.out.println("\nInvalid choice.");
                            }
                            
	                break;
	                
	            case "4":
	                for (int i = 0; i < FALSCourse.values().length; i++) {
	                    System.out.println("\t" +(i + 1) + ". " + FALSCourse.values()[i].FALSCourses());
	                }
	                c = getInput("\nEnter your choice: ", "[1-5]");
                            
                            switch(c){
                                case "1" : 
                                    course = "Bachelor of Science in Agribusiness Management";
                                    break;
                                case "2" :
                                    course = "Bachelor of Science in Biology";
                                    break;
                                case "3" :
                                    course = "Bachelor of Science in Develpment Communication";
                                    break;
                                case "4" :
                                    course = "Bachelor of Science in Environmental Science";
                                    break;
                                case "5" : 
                                    course = "Bachelor of Agricultural Technology";
                                    break;
                                default :
                                    System.out.println("\nInvalid choice.");
                            }
                            
	                break;
	                
	            case "5":
	                for (int i = 0; i < FGBMCourse.values().length; i++) {
	                    System.out.println("\t" +(i + 1) + ". " + FGBMCourse.values()[i].FGBMCourses());
	                }
	                c = getInput("\nEnter your choice: ", "[1-3]");
                            
                            switch(c){
                                case "1" : 
                                    course = "Bachelor of Science in Business Administration";
                                    break;
                                case "2" :
                                    course = "Bachelor of Science in Criminology";
                                    break;
                                case "3" :
                                    course = "Bachelor of Science in Hospitality Management";
                                    break;
                                default :
                                    System.out.println("\nInvalid choice.");
                            }
	                break;
	            default:
	                System.out.println("/nInvalid faculty.");
                            chooseCourse(faculty,choice);
	                break;
	        }
	        return course;
	    } catch (InputMismatchException e) {
	        System.out.println("\nInvalid input type!");
            scanner.nextLine();	 
	        return null;
	    } catch (Exception e) {
	        System.out.println("\nError: " + e.getMessage());
            scanner.nextLine();	 
	        return null;
	    }
 }
	
	private static void addInstructor() {
        
        while (true) {
            try {
                String instructorName = getInput("Instructor Name: ", "^[a-zA-Z\\s]*$");
                if (!isValidName(instructorName)) {
                    System.out.println("\nInvalid input! Please enter a valid name.");
                    continue; // Ask for input again
                }


                String faculty = null;
                    
                    while (faculty == null) { // Loop until a valid faculty is selected
	                int optionNum = 1;
                            System.out.println("Faculty List : ");
	                for (Facultys f : Facultys.values()) {
	                    System.out.println("\t" + optionNum + ". " + f.FacultyName());
	                    optionNum++;
	                }
                    String c = getInput("\nEnter your choice : ", "[1-5]");
                    
                    switch (c) {
	                case "1":
	                    faculty = "Faculty of Nursing Allied and Health Sciences";
	                    break;
	                case "2":
	                    faculty = "Faculty of Teacher Education";
	                    break;
	                case "3":
	                    faculty = "Faculty of Computing Data Sciences Engineering and Technology";
	                    break;
	                case "4":
	                    faculty = "Faculty of Agriculture and Life Sciences";
	                    break;
	                case "5":
	                    faculty = "Faculty of Governance and Business Management";
	                    break;
	                default:
	                    System.out.println("\nInvalid choice. Please enter a valid value.");

	                }
                    }
                
                     
                String subjects = getInput("\nEnter Subjects: ", "^[a-zA-Z0-9,\\s]+$");
                

                String[] subjectArray = subjects.split(",\\s*"); 

                for (String subject : subjectArray) {
                    String instructorRecord = instructorName + ", " + faculty + ", " + subject;
                    handleFileHandling(instructorRecord, "write", INSTRUCTOR_FILE_PATH);
                }
                
                System.out.println();
                System.out.println("Instuctor added successfully!");
                //openCSVFileInExcel(INSTRUCTOR_FILE_PATH);
                adminMenu();
               
                break; 

            } catch(InputMismatchException e){
                    System.out.println("\nInvalid input type!");
                    scanner.nextLine();	 

            } catch (Exception e) {
                System.out.println("\nError: " + e.getMessage());
                    scanner.nextLine();	 
            }
        }
 }   	 
	
	private static void editStudentInfo(String studentName) {
        try{
        List<String> studentLines = new ArrayList<>();
        List<String[]> studentData = new ArrayList<>();
        boolean found = false;
        String [] parts;

        try (Scanner studentScanner = new Scanner(new File(STUDENT_FILE_PATH))) {
            String studentHeader = studentScanner.nextLine(); 
            
            while (studentScanner.hasNextLine()) {
                String line = studentScanner.nextLine();
                parts = line.split(", ");
                if (parts[0].equalsIgnoreCase(studentName)) { 
                    found = true;
                    studentData.add(parts); 
                }
                studentLines.add(line);
            }

            if (!found) {
                System.out.println("\nStudent not found.");
                adminMenu();
            }

            for (int i = 0; i < studentData.size(); i++) {
                parts = studentData.get(i);
                System.out.println();
                System.out.println("RECORD " + (i + 1) + ":");
                System.out.println();
                System.out.println("1. Name: " + parts[0]);
                System.out.println("2. Student Id: " + parts[1]);
                System.out.println("3. Year Level: " + parts[2]);
                System.out.println("4. Semester: " + parts[3]);
                System.out.println("5. " + parts[4] + " : " + parts[5] );
                System.out.println("6. Section: " + parts[6]);
                System.out.println("7. Subject: " + parts[7]);
                System.out.println("8. Instructor: " + parts[8]);
                System.out.println("9. Subject Schedule: " + parts[9]);
                System.out.println("10. Subject Room: " + parts[10]);
                System.out.println("11. Back");
                System.out.println("----------------------------------------------------");
            }

                 System.out.print("\nEnter the number of the option you want to edit:");
                int choice = scanner.nextInt();
                scanner.nextLine(); 

                if (choice == 11) {
                    adminMenu();
                }
                if(choice > 11 || choice < 0){
                    System.out.println("\nInvalid choice.");
                    editStudentInfo(studentName);
                }
                 

                System.out.print("\nEnter the number of the record you want to edit (1-" + studentData.size() + "): ");
                int recordChoice = scanner.nextInt();
                scanner.nextLine(); 
                 
                 if (recordChoice < 1 || recordChoice > studentData.size()) {
                 System.out.println("\nInvalid record choice.");
                 editStudentInfo(studentName);
             }

                parts = studentData.get(recordChoice - 1);
                 String c;
                 String k;
                 
                switch (choice) {
                    case 1:
                        parts[0] = getInput("New Name: ", "^[a-zA-Z\\s]*$");
                        break;
                    case 2:
                        parts[1] = getInput("New Student Id: ", "Error! Hyperlink reference not valid.");
                        break;
                    case 3:
                        parts[2] = getInput("New Year Level: ", "[1-4]");
                        break;
                     case 4:
                        parts[3] = getInput("New Semester: ", "[1-2]");
                        break;
                    case 5:
                         parts[4] = null;
	                int optionNum = 1;
	                for (Facultys f : Facultys.values()) {
	                    System.out.println("\t" + optionNum + ". " + f.FacultyName());
	                    optionNum++;
	                }
                     
                         c = getInput("New Faculty: ", "[1-5]");
	                System.out.println();
	                
                         switch (c) {
                             case "1":
                                 parts[4] = "Faculty of Nursing Allied and Health Sciences";
                                 break;
                             case "2":
                                 parts[4] = "Faculty of Teacher Education";
                                 break;
                             case "3":
                                 parts[4] = "Faculty of Computing Data Sciences Engineering and Technology";
                                 break;
                             case "4":
                                 parts[4] = "Faculty of Agriculture and Life Sciences";
                                 break;
                             case "5":
                                 parts[4] = "Faculty of Governance and Business Management";
                                 break;
                             default:
                                 System.out.println("Invalid choice. Please enter a valid value.");

	                }
	            
                       

                        parts[5] =null;
                                                  
                         switch (parts[4]) {
                             case "Faculty of Nursing Allied and Health Sciences":
                                 for (int i = 0; i < FNAHSCourse.values().length; i++) {
                                     System.out.println("\t" + (i + 1) + ". " + FNAHSCourse.values()[i].FNAHSCourses());
                                 }
                                 k = getInput("\nEnter your choice: ", "[1]");
                                 
                                     switch(k){
                                     case "1" :
                                         parts[5] = ("Bachelor of Science in Nursing");
                                     break;
                                     default :
                                         System.out.println("\nInvalid choice.Please enter a valid value.");
                                 }   
                                 
                                 break;
                             case "Faculty of Teacher Education":
                                 for (int i = 0; i < FTEDCourse.values().length; i++) {
                                     System.out.println("\t" + (i + 1) + ". " + FTEDCourse.values()[i].FTEDCourses());
                                 }
                                 k = getInput("\nEnter your choice: ", "[1-6]");
                                 
                                 switch(k){
                                     case "1" : 
                                         parts[5] = "Bachelor of Elementary Education";
                                         break;
                                     case "2" :
                                         parts[5] = "Bachelor of Secondary Education - Major in Biological Sciences";
                                         break;
                                     case "3" :
                                         parts[5] = "Bachelor of Secondary Education - Major in English";
                                         break;
                                     case "4" : 
                                         parts[5] = "Bachelor of Secondary Education - Major in Mathematics";
                                         break;
                                     case "5" : 
                                         parts[5] = "Bachelor of Secondary Education - Major in Science";
                                         break;
                                     case "6" : 
                                         parts[5] = "Bachelor of Physical Education";
                                         break;
                                     case "7" :
                                         parts[5] = "Bachelor of Special Needs Educations";
                                         break;
                                     default : 
                                         System.out.println("\nInvalid choice.Please enter a valid value.");
                                 }
                                 break;
                             case "Faculty of Computing Data Sciences Engineering and Technology":
                                 for (int i = 0; i < FCDSETCourse.values().length; i++) {
                                     System.out.println("\t" + (i + 1) + ". " + FCDSETCourse.values()[i].FCDSETCourses());
                                 }
                                 k = getInput("\nEnter your choice: ", "[1-4]");
                                
                                 switch(k){
                                     case "1" :
                                         parts[5] = "Bachelor of Science in Civil Engineering";
                                         break;
                                     case "2" :
                                         parts[5] = "Bachelor of Industrial Technology Management";
                                         break;
                                     case "3" :
                                         parts[5] = "Bachelor of Infomation Technology";
                                         break;
                                     case "4" :
                                         parts[5] = "Bachelor of Mathematics - Major in Research and Statistics";
                                         break;
                                     default : 
                                         System.out.println("\nInvalid choice.Please enter a valid value.");
                                 }
                                 
                                 break;
                             case "Faculty of Agriculture and Life Sciences":
                                 for (int i = 0; i < FALSCourse.values().length; i++) {
                                     System.out.println("\t" + (i + 1) + ". " + FALSCourse.values()[i].FALSCourses());
                                 }
                                 k = getInput("\nEnter your choice: ", "[1-4]");
                                 
                                 switch(k){
                                     case "1" : 
                                         parts[5] = "Bachelor of Science in Agribusiness Management";
                                         break;
                                     case "2" :
                                         parts[5] = "Bachelor of Science in Biology";
                                         break;
                                     case "3" :
                                         parts[5] = "Bachelor of Science in Develpment Communication";
                                         break;
                                     case "4" :
                                         parts[5] = "Bachelor of Science in Environmental Science";
                                         break;
                                     case "5" : 
                                         parts[5] = "Bachelor of Agricultural Technology";
                                         break;
                                     default :
                                         System.out.println("\nInvalid choice.Please enter a valid value.");
                                 }
                                 break;
                             case "Faculty of Governance and Business Management":
                                 for (int i = 0; i < FGBMCourse.values().length; i++) {
                                     System.out.println("\t" + (i + 1) + ". " + FGBMCourse.values()[i].FGBMCourses());
                                 }
                                 
                                 k = getInput("\nEnter your choice: ", "[1-3]");
                                 switch(k){
                                     case "1" : 
                                         parts[5] = "Bachelor of Science in Business Administration";
                                         break;
                                     case "2" :
                                         parts[5] = "Bachelor of Science in Criminology";
                                         break;
                                     case "3" :
                                         parts[5] = "Bachelor of Science in Hospitality Management";
                                         break;
                                     default :
                                         System.out.println("\nInvalid choice.Please enter a valid value.");
                                 }
                                 
                                 break;
                             default:
                                 System.out.println("\nInvalid choice.");
                                 break;
                         }
                         
                        break;
                    case 6:
                        parts[6] = getInput("New Section: ", "^[a-zA-Z0-9\\s]+$");
                        break;
                    case 7:
                        parts[7] = getInput("New Subject: ", "^[a-zA-Z\\s]*$");
                        break;
                    case 8:
                        parts[8] = getInput("New Instructor: ", "^[a-zA-Z\\s]*$");
                        break;
                    case 9:
                        parts[9] = getSchedule(parts[7], parts[8]);
                        break;
                    case 10:
                        parts[10] = getInput("New Room: ", "^[a-zA-Z0-9\\s]+$");
                        break;
                     case 11:
                         adminMenu();
                    default:
                        System.out.println("\nInvalid choice.Please enter a valid value.");
                        editStudentInfo(studentName);
                }

                     

                                         
                // Write updated information back to the file
                try (PrintWriter studentWriter = new PrintWriter(new FileWriter(STUDENT_FILE_PATH))) {
                    studentWriter.println(studentHeader); // Write the student header
                     String newData = "";
                    for (String updatedLine : studentLines) {
                        parts = updatedLine.split(", ");
                        if (parts[0].equalsIgnoreCase(studentName)) {
                             for (String[] updatedParts : studentData) {
                                 String updatedPartsString = String.join(", ", updatedParts);
                                 studentWriter.println(updatedPartsString);
                                 newData += updatedPartsString;
                           }
                            savetoXML(newData, EDITSTUDENT_XML_PATH);   
                            saveToJSON(newData,EDITSTUDENT_JSON_PATH );
                        } else {
                            studentWriter.println(updatedLine);
                        }
                    }
                     
                }
                System.out.println("\nStudent information updated successfully.");

                System.out.print("\nDo you want to edit information again?y/n: ");
                String key = scanner.nextLine();

                while (!"y".equalsIgnoreCase(key) && !"n".equalsIgnoreCase(key)) {
                    System.out.print("\nInvalid choice. Please enter 'y' or 'n': ");
                    key = scanner.nextLine();
                    System.out.println();
                }

                if ("y".equalsIgnoreCase(key)) {
                    editStudentInfo(studentName);
                } else if ("n".equalsIgnoreCase(key)) {
                    adminMenu();
                }

            } catch (IOException e) {
                System.out.println("\nError: " + e.getMessage());
             scanner.nextLine();	 
            }

            //openCSVFileInExcel(STUDENT_FILE_PATH);
            adminMenu();
        }catch (InputMismatchException e){
             System.out.println("\nInvalid input type.");
             scanner.nextLine();
             editStudentInfo(studentName);
        }catch (Exception e){
                System.out.println("\nError Occured");
             scanner.nextLine();
             editStudentInfo(studentName);
        }

 }	 

	private static void editFaculty(String[] parts) {
         int optionNum = 1;
         System.out.println("Faculty List:");
         for (Facultys f : Facultys.values()) {
             System.out.println("\t" + optionNum + ". " + f.FacultyName());
             optionNum++;
         }
         String c = getInput("New Faculty: ", "[1-5]");

         switch (c) {
             case "1":
                 parts[2] = "Faculty of Nursing Allied and Health Sciences";
                 break;
             case "2":
                 parts[2] = "Faculty of Teacher Education";
                 break;
             case "3":
                 parts[2] = "Faculty of Computing Data Sciences Engineering and Technology";
                 break;
             case "4":
                 parts[2] = "Faculty of Agriculture and Life Sciences";
                 break;
             case "5":
                 parts[2] = "Faculty of Governance and Business Management";
                 break;
             default:
                 System.out.println("\nInvalid choice. Please enter a valid value.");
                 editFaculty(parts);
         }
     }

	private static void editInstructorInfo(String instructorName) {
        try {
            List<String> instructorLines = new ArrayList<>();
            List<String[]> instructorData = new ArrayList<>();
            boolean found = false;

            try (Scanner instructorScanner = new Scanner(new File(INSTRUCTOR_FILE_PATH))) {
                String instructorHeader = instructorScanner.nextLine();

                while (instructorScanner.hasNextLine()) {
                    String line = instructorScanner.nextLine();
                    String[] parts = line.split(", ");
                    if (parts[0].equalsIgnoreCase(instructorName)) {
                        found = true;
                        instructorData.add(parts);
                    }
                    instructorLines.add(line);
                }

                if (!found) {
                    System.out.println("\nInstructor not found.");
                    adminMenu();
                }

                for (int i = 0; i < instructorData.size(); i++) {
                    String[] parts = instructorData.get(i);
                    System.out.println();
                    System.out.println("RECORD " + (i + 1) + ":");
                    System.out.println("1. Instructor Name: " + parts[0]);
                    System.out.println("2. Faculty: " + parts[2]);
                    System.out.println("3. Subjects: " + parts[4]);
                    System.out.println("----------------------------------------------------");
                }
                System.out.print("\nEnter the number of the record you want to edit:");
                int recordChoice = scanner.nextInt();

                if (recordChoice < 1 || recordChoice > instructorData.size()) {
                    System.out.println("\nInvalid record choice.");
                    editInstructorInfo(instructorName);
                }

                String[] parts = instructorData.get(recordChoice - 1);

                System.out.print("\nEnter the number of the option you want to edit:");
                System.out.println();
                System.out.println("1. Instructor Name: " + parts[0]);
                System.out.println("2. Faculty: " + parts[2]);
                System.out.println("3. Subjects: " + parts[4]);
                System.out.println("4. Back");
                System.out.println("\nEnter your choice: ");
                int optionChoice = scanner.nextInt();
                scanner.nextLine(); 

                switch (optionChoice) {
                    case 1:
                        System.out.print("New Instructor Name: ");
                        String newName = scanner.nextLine();
                        parts[0] = newName;
                        break;
                    case 2:
                        editFaculty(parts);
                        break;
                    case 3:
                        editSubjects(parts);
                        break;
                    case 4:
                        adminMenu();
                        return;
                    default:
                        System.out.println("\nInvalid choice. Please enter a valid value.");
                        return;
                }

                for (int i = 0; i < instructorLines.size(); i++) {
                    String[] lineParts = instructorLines.get(i).split(", ");
                    if (lineParts[0].equalsIgnoreCase(instructorName) && Arrays.equals(lineParts, instructorData.get(recordChoice - 1))) {
                        instructorLines.set(i, String.join(", ", parts));
                    }
                }

                try (PrintWriter instructorWriter = new PrintWriter(new FileWriter(INSTRUCTOR_FILE_PATH))) {
                    instructorWriter.println(instructorHeader); 
                    String newData = "";
                    for (String updatedLine : instructorLines) {
                        String[] partsUpdatedLine = updatedLine.split(", ");
                        if (partsUpdatedLine[0].equalsIgnoreCase(instructorName)) {
                            for (String[] updatedParts : instructorData) {
                                String updatedPartsString =String.join(", ", updatedParts);
                                instructorWriter.println(updatedPartsString);
                                newData += updatedPartsString;
                            }
                            savetoXML(newData, EDITINSTRUCTOR_XML_PATH  ); 
                            saveToJSON(newData, EDITINSTRUCTOR_JSON_PATH);
                        } else {
                            instructorWriter.println(updatedLine);
                        }
                    }
                }   
            		System.out.println("\nInstructor information updated successfully.");
	                System.out.print("\nDo you want to edit information again?y/n: ");
	                String key = scanner.nextLine();

	                while (!"y".equalsIgnoreCase(key) && !"n".equalsIgnoreCase(key)) {
	                    System.out.print("\nInvalid choice. Please enter 'y' or 'n': ");
	                    key = scanner.nextLine();
	                    System.out.println();
	                }

	                if ("y".equalsIgnoreCase(key)) {
	                    editInstructorInfo(instructorName);
	                } else if ("n".equalsIgnoreCase(key)) {
	                    adminMenu();
	                }      
            } catch (IOException e) {
                System.out.println("\nAn error occured. Please try again.");
            }
            

        } catch (InputMismatchException e) {
            System.out.println("\nInvalid input type!");
            scanner.nextLine();
            editInstructorInfo(instructorName);
        } catch (Exception e) {
             System.out.println("\nError Occured");
            scanner.nextLine();
            editInstructorInfo(instructorName);
        }
        
                    
}
	
	private static void editSubjects(String[] parts) {
          String[] subjects = parts[4].split(";"); 
          System.out.println("Subjects handled by the instructor:");
          for (int i = 0; i < subjects.length; i++) {
              System.out.println((i + 1) + ". " + subjects[i]);
          }
          System.out.println("Enter the number of the subject you want to edit:");
          int subjectChoice = scanner.nextInt();
          scanner.nextLine(); 

          if (subjectChoice < 1 || subjectChoice > subjects.length) {
              System.out.println("\nInvalid subject choice.");
              return;
          }

          System.out.print("New number of subject: ");
          String newSubjectValue = scanner.nextLine();

         
          subjects[subjectChoice - 1] = newSubjectValue;
          parts[4] = String.join(";", subjects);
      }
	
	private static void instructorMenu(String username) {
        try {
        	divider();
            System.out.println("\t\t\t\tWelcome Instructor" + username + "!");
            int choice;

            System.out.println("1. View");
            System.out.println("2. Edit");
            System.out.println("3. Logout");
            System.out.print("\nEnter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    viewMenu(username);
                    break;
                case 2:
                    editMenu(username);
                    break;
                case 3:
                    System.out.println("Logout Complete.");
                    showMainMenu();
                    break;
                default:
                    System.out.println("\nInvalid choice. Please enter a valid option.");
                    instructorMenu(username);
                    break;
            }
        } catch (InputMismatchException e) {
            System.out.println("\nInvalid input.");
            scanner.nextLine();
            instructorMenu(username);
        } catch (Exception e) {
            System.out.println("\nAn error occured. Please try again.");
            instructorMenu(username);
        }
    }

    private static void viewMenu(String username) {
    	
        try {
        	divider();
    		System.out.println("\t\t\t\t\tInstructor\n");
            System.out.println("1. View Students");
            System.out.println("2. View Subjects");
            System.out.println("3. View Section");
            System.out.println("4. View Students Grade");
            System.out.println("5. Back");
            System.out.print("\nEnter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); 

            switch (choice) {
                case 1:
                    divider();
                    System.out.println("VIEW STUDENTS");
                    System.out.println();
                    viewStudents(username);
                    break;
                case 2:
                    divider();
                    System.out.println("VIEW SUBJECTS");
                    System.out.println();
                    viewSubjects(username);
                    break;
                case 3:
                    divider();
                    System.out.println("VIEW SECTION");
                    System.out.println();
                    viewSection(username);
                    break;
                case 4:
                    divider();
                    System.out.println("VIEW STUDENTS GRADES");
                    System.out.println();
                    viewStudentGrades(username);
                    break;
                case 5:
                    instructorMenu(username);
                    break;
                default:
                    System.out.println("\nInvalid choice. Please enter a valid option.");
                    viewMenu(username);
                    break;
            }
        } catch (InputMismatchException e) {
            System.out.println("\nInvalid input type");
            scanner.nextLine(); // Clear the \nInvalid input
            viewMenu(username);
        } catch (Exception e) {
            System.out.println("\nError Occured");
            scanner.nextLine();
            viewMenu(username);
        }
    }

    private static void viewStudents(String username) {
		System.out.println("\t\t\t\t\tInstructor\n");
        System.out.println("Students under " + username + ":");
        boolean found = false;

            try (Scanner studentScanner = new Scanner(new File(STUDENT_FILE_PATH))) {
                if (studentScanner.hasNextLine()) {
                    studentScanner.nextLine(); 
                }

                while (studentScanner.hasNextLine()) {
                    String line = studentScanner.nextLine();
                    String[] parts = line.split(", ");
                    if (username.equalsIgnoreCase(parts[8])) {
                        System.out.println("Student: " + parts[0] + " | Subject: " + parts[7]);
                        found = true;
                    }
                }

                if (!found) {
                    System.out.println("\nNo student found.");
                }

            } catch (FileNotFoundException e) {
                System.out.println("\nStudent file not found.");
            }
        
        instructorMenu(username);
 }	 
    
    private static void viewSubjects(String username) {
		System.out.println("\t\t\t\t\tInstructor\n");
        System.out.println("Subjects handled");
        System.out.println();
            try (Scanner instructorScanner = new Scanner(new File(INSTRUCTOR_FILE_PATH))) {
                if (instructorScanner.hasNextLine()) {
                    instructorScanner.nextLine(); // Skip header
                }
                boolean found = false; 
                while (instructorScanner.hasNextLine()) {
                    String line = instructorScanner.nextLine();
                    String[] parts = line.split(", ");
                    if (username.equalsIgnoreCase(parts[0])) {
                        System.out.println("Subject : " + parts[4]);
                        found = true;
                    }
                }

                if (!found) {
                    System.out.println("\nNo subject found under : " + username);
                }

            } catch (FileNotFoundException e) {
                System.out.println("\nError: " + e.getMessage());
                    scanner.nextLine();	 
            }

            instructorMenu(username);
 }
    
    private static void viewSection(String username) {
		System.out.println("\t\t\t\t\tInstructor\n");
        System.out.println("Sections handled");
        boolean found = false; 
            try (Scanner section = new Scanner(new File(STUDENT_FILE_PATH))) {
                if (section.hasNextLine()) {
                    section.nextLine(); 
                }

                while (section.hasNextLine()) {
                    String line = section.nextLine();
                    String[] parts = line.split(", ");
                    if (username.equalsIgnoreCase(parts[8])) {
                        System.out.println("Student: " + parts[0] + " | Subject: " + parts[7]  + " | Section: " + parts[6] + " | Day and Time : " + parts[9]);
                        found = true;
                    }
                }

                if (!found) {
                    System.out.println("\nNo section found.");
                }

            } catch (FileNotFoundException e) {
                System.out.println("\nAn error occured. Please try again." );
                   
            }
        
        instructorMenu(username);
 }	
    
    private static void viewStudentGrades(String username) {
		System.out.println("\t\t\t\t\tInstructor\n");
        System.out.println("Students under Instructor " + username + " Grades :");
        boolean found = false;

            try (Scanner studentgrade = new Scanner(new File(STUDENT_FILE_PATH))) {
                if (studentgrade.hasNextLine()) {
                    studentgrade.nextLine(); 
                }

                while (studentgrade.hasNextLine()) {
                    String line = studentgrade.nextLine();
                    String[] parts = line.split(", ");
                    if (username.equalsIgnoreCase(parts[8])) {
                        System.out.println("Student: " + parts[0] + " | Subject: " + parts[7]  + " | Grade: " + parts[11]);
                        found = true;
                    }
                }

                if (!found) {
                    System.out.println("\nNo student grade found.");
                }

            } catch (FileNotFoundException e) {
                System.out.println("\nAn error occured. Please try again.");
            }
        
        instructorMenu(username);
 }

    private static void editMenu(String username) {
        try {
         	divider();
    		System.out.println("\t\t\t\t\tInstructor\n");
            System.out.println("1. Edit Grades");
            System.out.println("2. Back");
            System.out.println("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); 

            switch (choice) {
                case 1:
                    divider();
                    System.out.println("EDITSTUDENT GRADE");
                    System.out.println();
                    System.out.print("Enter Student Name: ");
                    String studentName = scanner.nextLine();
                    editGrades(studentName, username);
                    break;
                case 2:
                    instructorMenu(username);
                    break;
                default:
                    System.out.println("\nInvalid choice. Please enter a valid option.");
                    editMenu(username);
                    break;
            }
        } catch (InputMismatchException e) {
            System.out.println("\nInvalid input type");
            editMenu(username);
        } catch (Exception e) {
         System.out.println("\nError Occured");
            scanner.nextLine();
            editMenu(username);
        }
    }
	
    private static String[] getSubjects() {
        
		try {
			System.out.print("\nNumber of subjects: ");
	        int num = scanner.nextInt();
	        scanner.nextLine(); 

	        String[] subjects = new String[num];
	        for (int i = 0; i < num; i++) {
	        	System.out.print("Subject Name: ");
	            subjects[i] = scanner.nextLine();
	            
	            if (!isValidCourseName(subjects[i])) {
	            	System.out.println("\nInvalid subject name. Please enter again.");
	                i--;
	                }
	            }
	            return subjects;
	        } catch (InputMismatchException e) {
	            System.out.println("\nInvalid input type!");
                scanner.nextLine();	 
	            return getSubjects(); 
	        } catch (Exception e) {
	            System.out.println("\nAn error occured. Please try again.");
                scanner.nextLine();	 
	            return getSubjects(); 
	        }
	 }

	private static String getSchedule(String subject, String instructor) {
        System.out.println("Schedule for " + subject + " (Instructor: " + instructor + "):");

        String daysPattern = "(Sa|Su|MWF|MF|TTh)";
        String days = getInput("Subject Days (Sa/Su/MWF/MF/TTh): ", daysPattern);

        String timePattern = "^\\d{1,2}:\\d{2}-\\d{1,2}:\\d{2}$";
        String time = getInput("Time (HH:mm-HH:mm): ", timePattern);

        return days + " (" + time + ")";
    }

	private static String getInstructor(String subject) {
	        
		 System.out.print("Instructor for " + subject + ": ");
	     String instructor = scanner.nextLine();
	     if (!isValidInstructor(instructor, subject)) {
	    	 return null;
	     }
	        return instructor;       
}
 
    private static String getInput(String prompt, String pattern) {
        System.out.print(prompt);
        String input = scanner.nextLine();
        if (!input.matches(pattern)) {
            System.out.println("\nInvalid input! Please enter a valid value.");
            return getInput(prompt, pattern);
        }
        return input;
    }
   
    private static void editGrades(String studentName, String username) {
        try {
         	divider();
    		System.out.println("\t\t\t\t\tInstructor\n");
            List<String> studentLines = new ArrayList<>();
            boolean found = false;

            try (Scanner studentScanner = new Scanner(new File(STUDENT_FILE_PATH))) {
                String studentHeader = studentScanner.nextLine(); 
                studentLines.add(studentHeader); 

                while (studentScanner.hasNextLine()) {
                    String line = studentScanner.nextLine();
                    String[] parts = line.split(", ");
                    if (parts[0].equalsIgnoreCase(studentName) && parts[8].equalsIgnoreCase(username)) {
                        found = true;
                        System.out.println();
                        System.out.println("Student: " + parts[0] + " | Subject: " + parts[7] + "  | Current Grade: " + parts[11]);
                        System.out.print("\nNew grade: ");

                        boolean validInput = false;
                        double newGrade = 0;

                        while (!validInput) {
                            try {
                                newGrade = Double.parseDouble(scanner.nextLine());
                                validInput = true;
                            } catch (NumberFormatException e) {
                                System.out.println("\nInvalid input. Please enter an integer.");
                                System.out.print("\nNew grade: ");
                            }
                        }

                        parts[11] = String.valueOf(newGrade);
                        line = String.join(", ", parts);
                    }
                    studentLines.add(line);
                }

                if (!found) {
                    System.out.println("\nEither the student does not exist or the instructor does not handle this student.");
                    instructorMenu(username);
                }

                try (PrintWriter studentWriter = new PrintWriter(new FileWriter(STUDENT_FILE_PATH))) {
                    for (String updatedLine : studentLines) {
                        studentWriter.println(updatedLine);
                    }
                }
                System.out.println("\nStudent grades updated successfully.");
                //openCSVFileInExcel(STUDENT_FILE_PATH);
            } catch (IOException e) {
                System.out.println("\nError reading or writing to file: " + e.getMessage());
            }

            instructorMenu(username);
        } catch (InputMismatchException e) {
            System.out.println("\nInvalid input type.");
            scanner.nextLine(); // Clear the invalid input
            editGrades(studentName, username);
        } catch (Exception e) {
            System.out.println("\nAn error occured. Please try again!");
            editGrades(studentName, username);
        }
    }

    private static void studentMenu(String username) {
        
		try{
			divider();
            System.out.println("\t\t\t\tWelcome " + username + "!");
	        System.out.println("1. View Grades");
	        System.out.println("2. Logout");
	        System.out.print("\nEnter your choice: ");
	        int choice = scanner.nextInt();
	        scanner.nextLine(); // Consume newline character

	        	switch (choice) {
	            	case 1:
	            		System.out.println("VIEW GRADES");
	                    System.out.println("\n");
	                    viewGrades(username);
	                    break;
	                    
	                case 2:
	                    showMainMenu();
                            break;
	                default:
	                    System.out.println("\nInvalid choice. Please enter a valid option.");
	                    studentMenu(username);
                            break;
	            }
	    
	        } catch(InputMismatchException e){
                    System.out.println("\nInvalid input type.");
                    scanner.nextLine();
                    studentMenu(username); 

	        } catch (Exception e ){
                    System.out.println("\nAn error occured. Please try again.");
                    scanner.nextLine(); 
                    studentMenu(username);
	        }
	    }

	private static void viewGrades(String username) {
	 	divider();
		System.out.println("\t\t\t\t\tStudent\n");
	        System.out.println("Viewing grades: ");
	        boolean found = false; // Variable to track if any student is found

	            try (Scanner grade = new Scanner(new File(STUDENT_FILE_PATH))) {
	                if (grade.hasNextLine()) {
	                    grade.nextLine(); // Skip header
	                }

	                while (grade.hasNextLine()) {
	                    String line = grade.nextLine();
	                    String[] parts = line.split(", ");
	                    if (username.equalsIgnoreCase(parts[0])) {
	                        System.out.println("Student: " + parts[0] + " | Subject: " + parts[7] + "   | Grade: ");
	                        found = true;
	                    }
	                }

	                if (!found) {
	                	while (grade.hasNextLine()) {
		                    String line = grade.nextLine();
		                    String[] parts = line.split(", ");
		                    if (username.equalsIgnoreCase(parts[0])) {
		                        System.out.println("Student: " + parts[0] + " | Subject: " + parts[7] + " | Grade: ");
		                        found = true;
		                    }
		                }
	                }

	                // Call instructorMenu here if needed
	            } catch (FileNotFoundException e) {
	                System.out.println("\nAn error occured.");
                        scanner.nextLine();	 
	            }

	            studentMenu(username);

}	 

	private static boolean isValidInstructor(String instructor, String subject) {
        
        try (Scanner fileScanner = new Scanner(new File(INSTRUCTOR_FILE_PATH))) {
            fileScanner.nextLine(); 
            while (fileScanner.hasNextLine()) {
                String[] parts = fileScanner.nextLine().split(", ");
                if (parts[0].equalsIgnoreCase(instructor) && parts[4].toLowerCase().contains(subject.toLowerCase())) {
                    return true;
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("\nInstructor file not found.");
        }
        return false;
 }

	private static void register() {
        
		try{
			divider();
	        System.out.println("\t\t\t\t\tRegister");
	        System.out.println();
	        System.out.println("1. Student");
	        System.out.println("2. Instructor");
	        System.out.println("3. Exit");
	        System.out.print("\nEnter your choice: ");
	        int choice = scanner.nextInt();
	        scanner.nextLine(); 

	        String username;
	        String pass;
	        String record;

	        	switch (choice) {
	            	case 1:
	            		divider();
	            		System.out.println("\t\t\t\t\tRegister");
	            		username = getInput("\nUsername: ", "^[a-zA-Z0-9\\s]+$");
                        pass = getInput("Password: ", "^[a-zA-Z0-9\\\\s]+$");
	                    record = "Student," + username + "," + pass; 
	                    System.out.println("\nRegistration has been successfully completed!");
                            
                        handleFileHandling(record, "write", REGISTER_FILE_PATH);
                        studentMenu(username);

	                    break;
	                    
	                case 2:
	                	divider();
	            		System.out.println("\t\t\t\t\tRegister");
	                    username = getInput("Username: ", "^[a-zA-Z0-9\\s]+$");
                        pass = getInput("Password: ", "^[a-zA-Z0-9\\s]+$");

	                    String adminKey;
	                        do {
	                            System.out.print("\nAdmin Key : ");
	                            adminKey = scanner.nextLine();

	                                if (!adminKey.equals("admin123")) {
	                                    System.out.println("\nIncorrect admin key. Please try again.");
	                                }
	                        } while (!adminKey.equals("admin123"));

	                    record = "Instructor, " + username + ", " + pass; 
	                    System.out.println("\nRegistration has been successfully completed!");
                        handleFileHandling(record, "write", REGISTER_FILE_PATH);
	                    instructorMenu(username);

	                    break;
	                
	                case 3:
	                	showMainMenu();
	                	
	                default:
	                    System.out.println("\nInvalid choice. Please enter a valid option.");
	                    return;
	            }
	            showMainMenu();
	            
	        } catch(InputMismatchException e){
	            System.out.println("\nInvalid input type!");
                scanner.nextLine();	 
                register();

	        } catch (Exception e ){
                System.out.println("\nAn error occured. Please try again.");
                scanner.nextLine();
                register();
	        }
	    }

	private static void handleFileHandling(String input, String fileMethod, String fileName) {
	        
	        switch (fileMethod) {
	            case "write":
	                try (PrintWriter out = new PrintWriter(new FileWriter(fileName, true))) {
	                    File file = new File(fileName);
	                    if (file.length() == 0) {
	                        if(fileName.equals(STUDENT_FILE_PATH)) {
	                            out.println("Student Name, Student Id, Year Level, Semester, Faculty, Course, Section, Subject, Instructor, Subschedule, Room,Grade");
	                        } else if (fileName.equals(INSTRUCTOR_FILE_PATH)) {
	                            out.println("Instructor Name,  , Faculty,    ,Subjects");
	                        } else if (fileName.equals(REGISTER_FILE_PATH)) {
	                            out.println("User, Username, Password, Name");
	                        }
	                    }
	                    out.println(input);
	                } catch (IOException e) {
	                    System.err.println("\nAn error occurred while writing to the file.");
	                }
	                break;
	            case "edit":
	                editFile(input, fileName);
	                break;
	            default:
	                System.out.println("\nInvalid file method.");
	        }
	    }	 
	 
	private static void editFile(String updatedLine, String fileName) {
	       
	        List<String> lines = new ArrayList<>();
	        try (Scanner fileScanner = new Scanner(new File(fileName))) {
	            String header = fileScanner.nextLine(); 
	            while (fileScanner.hasNextLine()) {
	                String line = fileScanner.nextLine();
	                if (!line.split(", ")[0].equals(updatedLine.split(", ")[0])) {
	                    lines.add(line);
	                }
	            }
	            lines.add(updatedLine); 
	            try (PrintWriter writer = new PrintWriter(new FileWriter(fileName))) {
	                writer.println(header);
	                for (String line : lines) {
	                    writer.println(line);
	                }
	            }
	        } catch (IOException e) {
	            System.out.println("\nAn error occured. Please try again.");
	        }
	 }
     	
	private static void savetoXML(String newData, String filepath) {
            try {
                
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();

                Document document;

                File file = new File(filepath);
                if (file.exists()) {
                    document = builder.parse(file);
                    document.getDocumentElement().normalize();
                } else {
                    document = builder.newDocument();
                    Element root = document.createElement("library");
                    document.appendChild(root);
                }
                Element root = document.getDocumentElement();

                Element updatestudent = document.createElement("newdata");
                updatestudent.appendChild(document.createTextNode(newData));
                root.appendChild(updatestudent);

                TransformerFactory transformerFactory = TransformerFactory.newInstance();
                Transformer transformer = transformerFactory.newTransformer();

                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
                DOMSource source = new DOMSource(document);

                StreamResult result = new StreamResult(filepath);
                transformer.transform(source, result);

            } catch (Exception e) {
                System.out.println("Error:" + e.getMessage());
            }
        }
   	
	private static void saveToJSON(String newData, String filepath) {
    	try {
    		JSONArray jsonArray;
                
            	File file = new File(filepath);
                if (file.exists()) {
                    FileReader fileReader = new FileReader(filepath);
                    char[] buffer = new char[(int) file.length()];
                    fileReader.read(buffer);
                    fileReader.close();

                    String jsonString = new String(buffer);
                    jsonArray = new JSONArray(jsonString);
                } else {
                    jsonArray = new JSONArray();
                }
                JSONObject jsonObject = new JSONObject();
                jsonObject.put("studentInfo", newData);
                jsonArray.put(jsonObject);

                FileWriter fileWriter = new FileWriter(filepath);
                fileWriter.write(jsonArray.toString(2)); 
                fileWriter.close();

            } catch (Exception e) {
                System.out.println("\nAn error occured. Please try again.");
            }
        }

	private static boolean isValidName(String name) {
	        return name.matches("[a-zA-Z\\s]+");
	    }

	private static boolean isValidCourseName(String name) {
			
	        return name.matches("[a-zA-Z0-9\\s]+");
	    }
    
	private static void divider(){
		 System.out.println("---------------------------------------------------------------------------------");
	 }	
         
//	 private static void openCSVFileInExcel(String filePath) {
//    
//    try {
//        File file = new File(filePath);
//        Desktop.getDesktop().open(file);
//    } catch (IOException e) {
//        System.out.println("Error: " + e.getMessage());
//            scanner.nextLine();	 
//    }
//}
//   
//	 
//	 
    }



enum Menu {
    Login, Register, Exit
}

enum Facultys {
    FACULTY_OF_NURSING_AND_ALLIED_HEALTH_SCIENCES("Faculty of Nursing and Allied Health Sciences"),
    FACULTY_OF_TEACHER_EDUCATION("Faculty of Teacher Education"),
    FACULTY_OF_COMPUTING_DATA_SCIENCES_ENGINEERING_AND_TECHNOLOGY("Faculty of Computing Data Sciences Engineering and Technology"),
    FACULTY_OF_AGRICULTURE_AND_LIFE_SCIENCES("Faculty of Agriculture and Life Sciences"),
    FACULTY_OF_GOVERNANCE_AND_BUSINESS_MANAGEMENT("Faculty of Governance and Business Management");

    String Faculty;

    Facultys(String label) {
        this.Faculty = label;
    }

    public String FacultyName() {
        return Faculty;
    }
}

enum FNAHSCourse {
	BSN("Bachelor of Science in Nursing");
   
	String FNAHS;

	FNAHSCourse(String label) {
		this.FNAHS = label;
	}

	public String FNAHSCourses() {
		return FNAHS;
	}
}

enum FTEDCourse {
	BEED("Bachelor of Elementary Education"),
	BSED_BIOSCI("Bacheor of Secondary Education - Major in Biological Sciences"),
	BSED_ENG("Bachelor of Secondary Education - Major in English"),
	BSED_MATH("Bachelor of Secondary Education - Major in Mathematics"),
	BSED_SCI("Bachelor of Secondary Education - Major in Science"),
	BPED("Bachelor of Physical Education"),
	BSPED("Bachelor of Special Needs Educations");

	String FTED;

	FTEDCourse(String label) {
		this.FTED = label;
	}

	public String FTEDCourses() {
		return FTED;
	}
}
	
enum FCDSETCourse {
	BSCE("Bachelor of Science in Civil Engineering"),
	BITM("Bachelor of Industrial Technology Management"),
	BSIT("Bachelor of Science in Infomation Technology"),
	BSMRS("Bachelor of Science in Mathematics - Major in Research and Statistics");
		
	String FCDSET;
		
	FCDSETCourse(String label){
		this.FCDSET = label;
	}
	
	public String FCDSETCourses() {
		return FCDSET;
	}
}

enum FALSCourse {
	BSAM("Bachelor of Science in Agribusiness Management"),
	BSBIO("Bachelor of Science in Biology"),
	BSDEVCOM("Bachelor of Science in Develpment Communication"),
	BSES("Bachelor of Science in Environmental Science"),
	BACHELOR_OF_AGRICULTURAL_TECHNOLOGY("Bachelor of Agricultural Technology");
		
	String FALS;
		
	FALSCourse(String label){
		this.FALS = label;
	}
		
	public String FALSCourses() {
		return FALS;
	}
}

enum FGBMCourse {
	BSBA("Bachelor of Science in Business Administration"),
	BSCRIM("Bachelor of Science in Criminology"),
	BSHM("Bachelor of Science in Hospitality Management");
	
	String FGBM;
		
	FGBMCourse(String label){
		this.FGBM = label;
	}
		
	public String FGBMCourses() {
		return FGBM;
	}
}
